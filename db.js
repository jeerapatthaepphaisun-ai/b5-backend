// db.js

// 1. นำเข้าไลบรารี 'pg' เพื่อใช้เชื่อมต่อกับฐานข้อมูล PostgreSQL
const { Pool } = require('pg');

// 2. นำเข้า 'dotenv' เพื่อให้สามารถอ่านค่าตัวแปรจากไฟล์ .env ได้
// บรรทัดนี้สำคัญมาก เพื่อให้ process.env.DATABASE_URL ทำงานได้อย่างถูกต้อง
require('dotenv').config();

// 3. สร้างและตั้งค่า Connection Pool
// Connection Pool คือกลไกที่ช่วยจัดการการเชื่อมต่อฐานข้อมูลอย่างมีประสิทธิภาพ
// แทนที่จะเปิด-ปิดการเชื่อมต่อใหม่ทุกครั้งที่มีการร้องขอ Pool จะสร้างการเชื่อมต่อรอไว้
// และนำกลับมาใช้ใหม่ ซึ่งช่วยลดภาระงานของทั้งเซิร์ฟเวอร์และฐานข้อมูลได้อย่างมาก
const pool = new Pool({
  // connectionString คือ URL ที่ใช้ระบุข้อมูลทั้งหมดในการเชื่อมต่อฐานข้อมูล
  // ซึ่งจะถูกอ่านมาจากไฟล์ .env เพื่อความปลอดภัย ไม่ควร Hardcode ค่านี้ในโค้ดโดยตรง
  connectionString: process.env.DATABASE_URL,
  
  // --- ✨ ส่วนที่ปรับปรุงเพื่อเพิ่มความเสถียร (Stability) ---

  // `max` คือ จำนวน Connection สูงสุดที่ Pool นี้จะสามารถสร้างได้พร้อมกัน
  // การกำหนดค่านี้ช่วยป้องกันไม่ให้แอปพลิเคชันสร้าง Connection ไปยังฐานข้อมูลมากเกินขีดจำกัด
  // ซึ่งเป็นสาเหตุหลักของปัญหา Server Down เมื่อมีการใช้งานพร้อมกันเยอะๆ
  // **คำเตือน:** ค่านี้ต้องน้อยกว่า "Max Connections" ที่แพ็กเกจฐานข้อมูลของคุณรองรับ
  max: 20,

  // `connectionTimeoutMillis` คือ ระยะเวลา (มิลลิวินาที) ที่ Pool จะรอเพื่อสร้างการเชื่อมต่อใหม่
  // หากไม่สำเร็จภายในเวลานี้ จะเกิด Error Timeout ขึ้น (แก้ปัญหา ETIMEDOUT)
  // 30000 ms = 30 วินาที
  connectionTimeoutMillis: 30000,

  // `idleTimeoutMillis` คือ ระยะเวลา (มิลลิวินาที) ที่ Connection ที่ "ว่าง" (ไม่ได้ถูกใช้งาน)
  // จะยังคงอยู่ใน Pool ก่อนที่จะถูกตัดการเชื่อมต่อเพื่อคืนทรัพยากร
  // ช่วยป้องกันปัญหา Connection ค้างในระบบ
  // 60000 ms = 60 วินาที
  idleTimeoutMillis: 60000,
});

// 4. Export ตัว 'pool' ที่สร้างขึ้น เพื่อให้ไฟล์อื่นๆ ในโปรเจกต์ (เช่น Controllers)
// สามารถนำไปใช้เพื่อส่งคำสั่งไปยังฐานข้อมูลได้
module.exports = pool;